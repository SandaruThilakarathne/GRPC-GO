// Code generated by protoc-gen-go. DO NOT EDIT.
// source: greetpb/greet.proto

/*
Package greetpb is a generated protocol buffer package.

It is generated from these files:
	greetpb/greet.proto

It has these top-level messages:
	Greeting
	GreetSum
	GreetRequest
	GreetResponse
	GreetSumRequest
	GreetSumResponse
	GreetManyTimesRequest
	GreetManyTimesResponse
	PrimeNumberDecompositionRequest
	PrimeNumberDecompositionResponse
	LongGreetRequest
	LongGreetResponse
	AverageRequest
	AverageResponse
	GreetEveryoneRequest
	GreetEvryonResponse
	MaxNumberRequest
	MaxNumberResponse
	SquareRootRequest
	SquareRootResponse
	GreetWithDeadlineRequest
	GreetWithDeadlineResponse
*/
package greetpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Greeting struct {
	FirstName string `protobuf:"bytes,1,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,2,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
}

func (m *Greeting) Reset()                    { *m = Greeting{} }
func (m *Greeting) String() string            { return proto.CompactTextString(m) }
func (*Greeting) ProtoMessage()               {}
func (*Greeting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Greeting) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Greeting) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

type GreetSum struct {
	FirstNumber int64 `protobuf:"varint,1,opt,name=first_number,json=firstNumber" json:"first_number,omitempty"`
	LastNumber  int64 `protobuf:"varint,2,opt,name=last_number,json=lastNumber" json:"last_number,omitempty"`
}

func (m *GreetSum) Reset()                    { *m = GreetSum{} }
func (m *GreetSum) String() string            { return proto.CompactTextString(m) }
func (*GreetSum) ProtoMessage()               {}
func (*GreetSum) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GreetSum) GetFirstNumber() int64 {
	if m != nil {
		return m.FirstNumber
	}
	return 0
}

func (m *GreetSum) GetLastNumber() int64 {
	if m != nil {
		return m.LastNumber
	}
	return 0
}

type GreetRequest struct {
	Greeting *Greeting `protobuf:"bytes,1,opt,name=greeting" json:"greeting,omitempty"`
}

func (m *GreetRequest) Reset()                    { *m = GreetRequest{} }
func (m *GreetRequest) String() string            { return proto.CompactTextString(m) }
func (*GreetRequest) ProtoMessage()               {}
func (*GreetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GreetRequest) GetGreeting() *Greeting {
	if m != nil {
		return m.Greeting
	}
	return nil
}

// Unery Exerice
type GreetResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *GreetResponse) Reset()                    { *m = GreetResponse{} }
func (m *GreetResponse) String() string            { return proto.CompactTextString(m) }
func (*GreetResponse) ProtoMessage()               {}
func (*GreetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GreetResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type GreetSumRequest struct {
	Greetsum *GreetSum `protobuf:"bytes,1,opt,name=greetsum" json:"greetsum,omitempty"`
}

func (m *GreetSumRequest) Reset()                    { *m = GreetSumRequest{} }
func (m *GreetSumRequest) String() string            { return proto.CompactTextString(m) }
func (*GreetSumRequest) ProtoMessage()               {}
func (*GreetSumRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GreetSumRequest) GetGreetsum() *GreetSum {
	if m != nil {
		return m.Greetsum
	}
	return nil
}

type GreetSumResponse struct {
	Result int64 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *GreetSumResponse) Reset()                    { *m = GreetSumResponse{} }
func (m *GreetSumResponse) String() string            { return proto.CompactTextString(m) }
func (*GreetSumResponse) ProtoMessage()               {}
func (*GreetSumResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GreetSumResponse) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

// Greet Many times
type GreetManyTimesRequest struct {
	Greeting *Greeting `protobuf:"bytes,1,opt,name=greeting" json:"greeting,omitempty"`
}

func (m *GreetManyTimesRequest) Reset()                    { *m = GreetManyTimesRequest{} }
func (m *GreetManyTimesRequest) String() string            { return proto.CompactTextString(m) }
func (*GreetManyTimesRequest) ProtoMessage()               {}
func (*GreetManyTimesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GreetManyTimesRequest) GetGreeting() *Greeting {
	if m != nil {
		return m.Greeting
	}
	return nil
}

type GreetManyTimesResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *GreetManyTimesResponse) Reset()                    { *m = GreetManyTimesResponse{} }
func (m *GreetManyTimesResponse) String() string            { return proto.CompactTextString(m) }
func (*GreetManyTimesResponse) ProtoMessage()               {}
func (*GreetManyTimesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GreetManyTimesResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

// Server Streaming Exerice
type PrimeNumberDecompositionRequest struct {
	Number int64 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
}

func (m *PrimeNumberDecompositionRequest) Reset()                    { *m = PrimeNumberDecompositionRequest{} }
func (m *PrimeNumberDecompositionRequest) String() string            { return proto.CompactTextString(m) }
func (*PrimeNumberDecompositionRequest) ProtoMessage()               {}
func (*PrimeNumberDecompositionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PrimeNumberDecompositionRequest) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type PrimeNumberDecompositionResponse struct {
	PrimeFactor int64 `protobuf:"varint,1,opt,name=prime_factor,json=primeFactor" json:"prime_factor,omitempty"`
}

func (m *PrimeNumberDecompositionResponse) Reset()         { *m = PrimeNumberDecompositionResponse{} }
func (m *PrimeNumberDecompositionResponse) String() string { return proto.CompactTextString(m) }
func (*PrimeNumberDecompositionResponse) ProtoMessage()    {}
func (*PrimeNumberDecompositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{9}
}

func (m *PrimeNumberDecompositionResponse) GetPrimeFactor() int64 {
	if m != nil {
		return m.PrimeFactor
	}
	return 0
}

// Client Streaming
type LongGreetRequest struct {
	Greeting *Greeting `protobuf:"bytes,1,opt,name=greeting" json:"greeting,omitempty"`
}

func (m *LongGreetRequest) Reset()                    { *m = LongGreetRequest{} }
func (m *LongGreetRequest) String() string            { return proto.CompactTextString(m) }
func (*LongGreetRequest) ProtoMessage()               {}
func (*LongGreetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *LongGreetRequest) GetGreeting() *Greeting {
	if m != nil {
		return m.Greeting
	}
	return nil
}

type LongGreetResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *LongGreetResponse) Reset()                    { *m = LongGreetResponse{} }
func (m *LongGreetResponse) String() string            { return proto.CompactTextString(m) }
func (*LongGreetResponse) ProtoMessage()               {}
func (*LongGreetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *LongGreetResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

// Client Steaming Exerice
type AverageRequest struct {
	Number int32 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
}

func (m *AverageRequest) Reset()                    { *m = AverageRequest{} }
func (m *AverageRequest) String() string            { return proto.CompactTextString(m) }
func (*AverageRequest) ProtoMessage()               {}
func (*AverageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AverageRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type AverageResponse struct {
	Average float64 `protobuf:"fixed64,1,opt,name=average" json:"average,omitempty"`
}

func (m *AverageResponse) Reset()                    { *m = AverageResponse{} }
func (m *AverageResponse) String() string            { return proto.CompactTextString(m) }
func (*AverageResponse) ProtoMessage()               {}
func (*AverageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *AverageResponse) GetAverage() float64 {
	if m != nil {
		return m.Average
	}
	return 0
}

// Bi Di
type GreetEveryoneRequest struct {
	Greeting *Greeting `protobuf:"bytes,1,opt,name=greeting" json:"greeting,omitempty"`
}

func (m *GreetEveryoneRequest) Reset()                    { *m = GreetEveryoneRequest{} }
func (m *GreetEveryoneRequest) String() string            { return proto.CompactTextString(m) }
func (*GreetEveryoneRequest) ProtoMessage()               {}
func (*GreetEveryoneRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GreetEveryoneRequest) GetGreeting() *Greeting {
	if m != nil {
		return m.Greeting
	}
	return nil
}

type GreetEvryonResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *GreetEvryonResponse) Reset()                    { *m = GreetEvryonResponse{} }
func (m *GreetEvryonResponse) String() string            { return proto.CompactTextString(m) }
func (*GreetEvryonResponse) ProtoMessage()               {}
func (*GreetEvryonResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GreetEvryonResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

// Bi Di Exerice
type MaxNumberRequest struct {
	Number int32 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
}

func (m *MaxNumberRequest) Reset()                    { *m = MaxNumberRequest{} }
func (m *MaxNumberRequest) String() string            { return proto.CompactTextString(m) }
func (*MaxNumberRequest) ProtoMessage()               {}
func (*MaxNumberRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *MaxNumberRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type MaxNumberResponse struct {
	Result int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *MaxNumberResponse) Reset()                    { *m = MaxNumberResponse{} }
func (m *MaxNumberResponse) String() string            { return proto.CompactTextString(m) }
func (*MaxNumberResponse) ProtoMessage()               {}
func (*MaxNumberResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *MaxNumberResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type SquareRootRequest struct {
	Number int32 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
}

func (m *SquareRootRequest) Reset()                    { *m = SquareRootRequest{} }
func (m *SquareRootRequest) String() string            { return proto.CompactTextString(m) }
func (*SquareRootRequest) ProtoMessage()               {}
func (*SquareRootRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *SquareRootRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type SquareRootResponse struct {
	NumberRoot float64 `protobuf:"fixed64,1,opt,name=number_root,json=numberRoot" json:"number_root,omitempty"`
}

func (m *SquareRootResponse) Reset()                    { *m = SquareRootResponse{} }
func (m *SquareRootResponse) String() string            { return proto.CompactTextString(m) }
func (*SquareRootResponse) ProtoMessage()               {}
func (*SquareRootResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *SquareRootResponse) GetNumberRoot() float64 {
	if m != nil {
		return m.NumberRoot
	}
	return 0
}

// greet with deadline request
type GreetWithDeadlineRequest struct {
	Greeting *Greeting `protobuf:"bytes,1,opt,name=greeting" json:"greeting,omitempty"`
}

func (m *GreetWithDeadlineRequest) Reset()                    { *m = GreetWithDeadlineRequest{} }
func (m *GreetWithDeadlineRequest) String() string            { return proto.CompactTextString(m) }
func (*GreetWithDeadlineRequest) ProtoMessage()               {}
func (*GreetWithDeadlineRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GreetWithDeadlineRequest) GetGreeting() *Greeting {
	if m != nil {
		return m.Greeting
	}
	return nil
}

type GreetWithDeadlineResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *GreetWithDeadlineResponse) Reset()                    { *m = GreetWithDeadlineResponse{} }
func (m *GreetWithDeadlineResponse) String() string            { return proto.CompactTextString(m) }
func (*GreetWithDeadlineResponse) ProtoMessage()               {}
func (*GreetWithDeadlineResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GreetWithDeadlineResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*Greeting)(nil), "greet.Greeting")
	proto.RegisterType((*GreetSum)(nil), "greet.GreetSum")
	proto.RegisterType((*GreetRequest)(nil), "greet.GreetRequest")
	proto.RegisterType((*GreetResponse)(nil), "greet.GreetResponse")
	proto.RegisterType((*GreetSumRequest)(nil), "greet.GreetSumRequest")
	proto.RegisterType((*GreetSumResponse)(nil), "greet.GreetSumResponse")
	proto.RegisterType((*GreetManyTimesRequest)(nil), "greet.GreetManyTimesRequest")
	proto.RegisterType((*GreetManyTimesResponse)(nil), "greet.GreetManyTimesResponse")
	proto.RegisterType((*PrimeNumberDecompositionRequest)(nil), "greet.PrimeNumberDecompositionRequest")
	proto.RegisterType((*PrimeNumberDecompositionResponse)(nil), "greet.PrimeNumberDecompositionResponse")
	proto.RegisterType((*LongGreetRequest)(nil), "greet.LongGreetRequest")
	proto.RegisterType((*LongGreetResponse)(nil), "greet.LongGreetResponse")
	proto.RegisterType((*AverageRequest)(nil), "greet.AverageRequest")
	proto.RegisterType((*AverageResponse)(nil), "greet.AverageResponse")
	proto.RegisterType((*GreetEveryoneRequest)(nil), "greet.GreetEveryoneRequest")
	proto.RegisterType((*GreetEvryonResponse)(nil), "greet.GreetEvryonResponse")
	proto.RegisterType((*MaxNumberRequest)(nil), "greet.MaxNumberRequest")
	proto.RegisterType((*MaxNumberResponse)(nil), "greet.MaxNumberResponse")
	proto.RegisterType((*SquareRootRequest)(nil), "greet.SquareRootRequest")
	proto.RegisterType((*SquareRootResponse)(nil), "greet.SquareRootResponse")
	proto.RegisterType((*GreetWithDeadlineRequest)(nil), "greet.GreetWithDeadlineRequest")
	proto.RegisterType((*GreetWithDeadlineResponse)(nil), "greet.GreetWithDeadlineResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GreetService service

type GreetServiceClient interface {
	// Unary
	Greet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error)
	// Unary Exerice
	GreetCalculator(ctx context.Context, in *GreetSumRequest, opts ...grpc.CallOption) (*GreetSumResponse, error)
	// Server Streaming
	GreetManyTimes(ctx context.Context, in *GreetManyTimesRequest, opts ...grpc.CallOption) (GreetService_GreetManyTimesClient, error)
	// Server Streaming Exerice
	PrimeNumberDecomposition(ctx context.Context, in *PrimeNumberDecompositionRequest, opts ...grpc.CallOption) (GreetService_PrimeNumberDecompositionClient, error)
	// Client Streaming
	LongGreet(ctx context.Context, opts ...grpc.CallOption) (GreetService_LongGreetClient, error)
	// Client Streaming Exerice
	Average(ctx context.Context, opts ...grpc.CallOption) (GreetService_AverageClient, error)
	// BiDi Streaming
	GreetEveryone(ctx context.Context, opts ...grpc.CallOption) (GreetService_GreetEveryoneClient, error)
	// BiDi Streaming Exerice
	MaxNumber(ctx context.Context, opts ...grpc.CallOption) (GreetService_MaxNumberClient, error)
	// Error Handling
	// this RPC will throw an exception if the number is negative number
	// The error being send is of type INVALID_ARGUMENT
	SquareRoot(ctx context.Context, in *SquareRootRequest, opts ...grpc.CallOption) (*SquareRootResponse, error)
	// Unary greet with deadline
	GreetWithDeadline(ctx context.Context, in *GreetWithDeadlineRequest, opts ...grpc.CallOption) (*GreetWithDeadlineResponse, error)
}

type greetServiceClient struct {
	cc *grpc.ClientConn
}

func NewGreetServiceClient(cc *grpc.ClientConn) GreetServiceClient {
	return &greetServiceClient{cc}
}

func (c *greetServiceClient) Greet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error) {
	out := new(GreetResponse)
	err := grpc.Invoke(ctx, "/greet.GreetService/Greet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetServiceClient) GreetCalculator(ctx context.Context, in *GreetSumRequest, opts ...grpc.CallOption) (*GreetSumResponse, error) {
	out := new(GreetSumResponse)
	err := grpc.Invoke(ctx, "/greet.GreetService/GreetCalculator", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetServiceClient) GreetManyTimes(ctx context.Context, in *GreetManyTimesRequest, opts ...grpc.CallOption) (GreetService_GreetManyTimesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GreetService_serviceDesc.Streams[0], c.cc, "/greet.GreetService/GreetManyTimes", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceGreetManyTimesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetService_GreetManyTimesClient interface {
	Recv() (*GreetManyTimesResponse, error)
	grpc.ClientStream
}

type greetServiceGreetManyTimesClient struct {
	grpc.ClientStream
}

func (x *greetServiceGreetManyTimesClient) Recv() (*GreetManyTimesResponse, error) {
	m := new(GreetManyTimesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) PrimeNumberDecomposition(ctx context.Context, in *PrimeNumberDecompositionRequest, opts ...grpc.CallOption) (GreetService_PrimeNumberDecompositionClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GreetService_serviceDesc.Streams[1], c.cc, "/greet.GreetService/PrimeNumberDecomposition", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServicePrimeNumberDecompositionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetService_PrimeNumberDecompositionClient interface {
	Recv() (*PrimeNumberDecompositionResponse, error)
	grpc.ClientStream
}

type greetServicePrimeNumberDecompositionClient struct {
	grpc.ClientStream
}

func (x *greetServicePrimeNumberDecompositionClient) Recv() (*PrimeNumberDecompositionResponse, error) {
	m := new(PrimeNumberDecompositionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) LongGreet(ctx context.Context, opts ...grpc.CallOption) (GreetService_LongGreetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GreetService_serviceDesc.Streams[2], c.cc, "/greet.GreetService/LongGreet", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceLongGreetClient{stream}
	return x, nil
}

type GreetService_LongGreetClient interface {
	Send(*LongGreetRequest) error
	CloseAndRecv() (*LongGreetResponse, error)
	grpc.ClientStream
}

type greetServiceLongGreetClient struct {
	grpc.ClientStream
}

func (x *greetServiceLongGreetClient) Send(m *LongGreetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceLongGreetClient) CloseAndRecv() (*LongGreetResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LongGreetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) Average(ctx context.Context, opts ...grpc.CallOption) (GreetService_AverageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GreetService_serviceDesc.Streams[3], c.cc, "/greet.GreetService/Average", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceAverageClient{stream}
	return x, nil
}

type GreetService_AverageClient interface {
	Send(*AverageRequest) error
	CloseAndRecv() (*AverageResponse, error)
	grpc.ClientStream
}

type greetServiceAverageClient struct {
	grpc.ClientStream
}

func (x *greetServiceAverageClient) Send(m *AverageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceAverageClient) CloseAndRecv() (*AverageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) GreetEveryone(ctx context.Context, opts ...grpc.CallOption) (GreetService_GreetEveryoneClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GreetService_serviceDesc.Streams[4], c.cc, "/greet.GreetService/GreetEveryone", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceGreetEveryoneClient{stream}
	return x, nil
}

type GreetService_GreetEveryoneClient interface {
	Send(*GreetEveryoneRequest) error
	Recv() (*GreetEvryonResponse, error)
	grpc.ClientStream
}

type greetServiceGreetEveryoneClient struct {
	grpc.ClientStream
}

func (x *greetServiceGreetEveryoneClient) Send(m *GreetEveryoneRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceGreetEveryoneClient) Recv() (*GreetEvryonResponse, error) {
	m := new(GreetEvryonResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) MaxNumber(ctx context.Context, opts ...grpc.CallOption) (GreetService_MaxNumberClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GreetService_serviceDesc.Streams[5], c.cc, "/greet.GreetService/MaxNumber", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceMaxNumberClient{stream}
	return x, nil
}

type GreetService_MaxNumberClient interface {
	Send(*MaxNumberRequest) error
	Recv() (*MaxNumberResponse, error)
	grpc.ClientStream
}

type greetServiceMaxNumberClient struct {
	grpc.ClientStream
}

func (x *greetServiceMaxNumberClient) Send(m *MaxNumberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceMaxNumberClient) Recv() (*MaxNumberResponse, error) {
	m := new(MaxNumberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) SquareRoot(ctx context.Context, in *SquareRootRequest, opts ...grpc.CallOption) (*SquareRootResponse, error) {
	out := new(SquareRootResponse)
	err := grpc.Invoke(ctx, "/greet.GreetService/SquareRoot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetServiceClient) GreetWithDeadline(ctx context.Context, in *GreetWithDeadlineRequest, opts ...grpc.CallOption) (*GreetWithDeadlineResponse, error) {
	out := new(GreetWithDeadlineResponse)
	err := grpc.Invoke(ctx, "/greet.GreetService/GreetWithDeadline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GreetService service

type GreetServiceServer interface {
	// Unary
	Greet(context.Context, *GreetRequest) (*GreetResponse, error)
	// Unary Exerice
	GreetCalculator(context.Context, *GreetSumRequest) (*GreetSumResponse, error)
	// Server Streaming
	GreetManyTimes(*GreetManyTimesRequest, GreetService_GreetManyTimesServer) error
	// Server Streaming Exerice
	PrimeNumberDecomposition(*PrimeNumberDecompositionRequest, GreetService_PrimeNumberDecompositionServer) error
	// Client Streaming
	LongGreet(GreetService_LongGreetServer) error
	// Client Streaming Exerice
	Average(GreetService_AverageServer) error
	// BiDi Streaming
	GreetEveryone(GreetService_GreetEveryoneServer) error
	// BiDi Streaming Exerice
	MaxNumber(GreetService_MaxNumberServer) error
	// Error Handling
	// this RPC will throw an exception if the number is negative number
	// The error being send is of type INVALID_ARGUMENT
	SquareRoot(context.Context, *SquareRootRequest) (*SquareRootResponse, error)
	// Unary greet with deadline
	GreetWithDeadline(context.Context, *GreetWithDeadlineRequest) (*GreetWithDeadlineResponse, error)
}

func RegisterGreetServiceServer(s *grpc.Server, srv GreetServiceServer) {
	s.RegisterService(&_GreetService_serviceDesc, srv)
}

func _GreetService_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.GreetService/Greet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).Greet(ctx, req.(*GreetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetService_GreetCalculator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetSumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).GreetCalculator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.GreetService/GreetCalculator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).GreetCalculator(ctx, req.(*GreetSumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetService_GreetManyTimes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GreetManyTimesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetServiceServer).GreetManyTimes(m, &greetServiceGreetManyTimesServer{stream})
}

type GreetService_GreetManyTimesServer interface {
	Send(*GreetManyTimesResponse) error
	grpc.ServerStream
}

type greetServiceGreetManyTimesServer struct {
	grpc.ServerStream
}

func (x *greetServiceGreetManyTimesServer) Send(m *GreetManyTimesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GreetService_PrimeNumberDecomposition_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeNumberDecompositionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetServiceServer).PrimeNumberDecomposition(m, &greetServicePrimeNumberDecompositionServer{stream})
}

type GreetService_PrimeNumberDecompositionServer interface {
	Send(*PrimeNumberDecompositionResponse) error
	grpc.ServerStream
}

type greetServicePrimeNumberDecompositionServer struct {
	grpc.ServerStream
}

func (x *greetServicePrimeNumberDecompositionServer) Send(m *PrimeNumberDecompositionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GreetService_LongGreet_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).LongGreet(&greetServiceLongGreetServer{stream})
}

type GreetService_LongGreetServer interface {
	SendAndClose(*LongGreetResponse) error
	Recv() (*LongGreetRequest, error)
	grpc.ServerStream
}

type greetServiceLongGreetServer struct {
	grpc.ServerStream
}

func (x *greetServiceLongGreetServer) SendAndClose(m *LongGreetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceLongGreetServer) Recv() (*LongGreetRequest, error) {
	m := new(LongGreetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreetService_Average_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).Average(&greetServiceAverageServer{stream})
}

type GreetService_AverageServer interface {
	SendAndClose(*AverageResponse) error
	Recv() (*AverageRequest, error)
	grpc.ServerStream
}

type greetServiceAverageServer struct {
	grpc.ServerStream
}

func (x *greetServiceAverageServer) SendAndClose(m *AverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceAverageServer) Recv() (*AverageRequest, error) {
	m := new(AverageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreetService_GreetEveryone_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).GreetEveryone(&greetServiceGreetEveryoneServer{stream})
}

type GreetService_GreetEveryoneServer interface {
	Send(*GreetEvryonResponse) error
	Recv() (*GreetEveryoneRequest, error)
	grpc.ServerStream
}

type greetServiceGreetEveryoneServer struct {
	grpc.ServerStream
}

func (x *greetServiceGreetEveryoneServer) Send(m *GreetEvryonResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceGreetEveryoneServer) Recv() (*GreetEveryoneRequest, error) {
	m := new(GreetEveryoneRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreetService_MaxNumber_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).MaxNumber(&greetServiceMaxNumberServer{stream})
}

type GreetService_MaxNumberServer interface {
	Send(*MaxNumberResponse) error
	Recv() (*MaxNumberRequest, error)
	grpc.ServerStream
}

type greetServiceMaxNumberServer struct {
	grpc.ServerStream
}

func (x *greetServiceMaxNumberServer) Send(m *MaxNumberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceMaxNumberServer) Recv() (*MaxNumberRequest, error) {
	m := new(MaxNumberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreetService_SquareRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SquareRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).SquareRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.GreetService/SquareRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).SquareRoot(ctx, req.(*SquareRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetService_GreetWithDeadline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetWithDeadlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).GreetWithDeadline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.GreetService/GreetWithDeadline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).GreetWithDeadline(ctx, req.(*GreetWithDeadlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GreetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "greet.GreetService",
	HandlerType: (*GreetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greet",
			Handler:    _GreetService_Greet_Handler,
		},
		{
			MethodName: "GreetCalculator",
			Handler:    _GreetService_GreetCalculator_Handler,
		},
		{
			MethodName: "SquareRoot",
			Handler:    _GreetService_SquareRoot_Handler,
		},
		{
			MethodName: "GreetWithDeadline",
			Handler:    _GreetService_GreetWithDeadline_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GreetManyTimes",
			Handler:       _GreetService_GreetManyTimes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PrimeNumberDecomposition",
			Handler:       _GreetService_PrimeNumberDecomposition_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LongGreet",
			Handler:       _GreetService_LongGreet_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Average",
			Handler:       _GreetService_Average_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GreetEveryone",
			Handler:       _GreetService_GreetEveryone_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "MaxNumber",
			Handler:       _GreetService_MaxNumber_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "greetpb/greet.proto",
}

func init() { proto.RegisterFile("greetpb/greet.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 653 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0x51, 0x6f, 0xda, 0x30,
	0x14, 0x85, 0x97, 0x56, 0x50, 0x72, 0x61, 0x05, 0x4c, 0xcb, 0x68, 0xba, 0x0a, 0x9a, 0x87, 0x15,
	0x15, 0xad, 0x43, 0xed, 0xf6, 0x30, 0x6d, 0xda, 0xb4, 0x42, 0xdb, 0x97, 0x15, 0x6d, 0x61, 0xd2,
	0xa6, 0xbd, 0x20, 0xc3, 0x5c, 0x16, 0x89, 0xc4, 0xd4, 0x49, 0xd0, 0xfa, 0x03, 0xf6, 0xbf, 0xa7,
	0x38, 0xb6, 0x1b, 0x42, 0x58, 0x24, 0x9e, 0xc0, 0xd7, 0xc7, 0xdf, 0xf5, 0x71, 0x72, 0x1c, 0xa8,
	0x4d, 0x19, 0x21, 0xfe, 0x7c, 0xfc, 0x8a, 0xff, 0x9e, 0xcd, 0x19, 0xf5, 0x29, 0xca, 0xf1, 0x81,
	0x79, 0x0d, 0x85, 0x9b, 0xf0, 0x8f, 0xed, 0x4e, 0xd1, 0x11, 0xc0, 0x9d, 0xcd, 0x3c, 0x7f, 0xe4,
	0x62, 0x87, 0x34, 0xb4, 0x96, 0xd6, 0xd6, 0x2d, 0x9d, 0x57, 0x06, 0xd8, 0x21, 0xe8, 0x10, 0xf4,
	0x19, 0x96, 0xb3, 0x5b, 0x7c, 0xb6, 0x10, 0x16, 0xc2, 0x49, 0x73, 0x20, 0x38, 0xc3, 0xc0, 0x41,
	0xc7, 0x50, 0x12, 0x9c, 0xc0, 0x19, 0x13, 0xc6, 0x49, 0xdb, 0x56, 0x31, 0x22, 0xf1, 0x12, 0x6a,
	0x42, 0x31, 0x62, 0x45, 0x8a, 0x2d, 0xae, 0x00, 0x4e, 0xe3, 0x15, 0xf3, 0x1d, 0x94, 0x38, 0xcf,
	0x22, 0xf7, 0x01, 0xf1, 0x7c, 0xd4, 0x81, 0xc2, 0x54, 0xec, 0x93, 0xf3, 0x8a, 0xe7, 0xe5, 0xb3,
	0xc8, 0x8e, 0xdc, 0xbe, 0xa5, 0x04, 0xe6, 0x09, 0x3c, 0x15, 0x8b, 0xbd, 0x39, 0x75, 0x3d, 0x82,
	0xea, 0x90, 0x67, 0xc4, 0x0b, 0x66, 0xbe, 0x70, 0x25, 0x46, 0xe6, 0x07, 0x28, 0xcb, 0x5d, 0x27,
	0x1b, 0x79, 0x81, 0x93, 0xd6, 0x28, 0x54, 0x2a, 0x81, 0x79, 0x0a, 0x95, 0xc7, 0xf5, 0xa9, 0xbd,
	0xb6, 0x55, 0xaf, 0x3e, 0xec, 0x73, 0xed, 0x2d, 0x76, 0x1f, 0xbe, 0xd9, 0x0e, 0xf1, 0x36, 0xb2,
	0xd6, 0x85, 0x7a, 0x92, 0x92, 0xe1, 0xf1, 0x2d, 0x34, 0xbf, 0x30, 0xdb, 0x21, 0xd1, 0xc1, 0xf6,
	0xc9, 0x84, 0x3a, 0x73, 0xea, 0xd9, 0xbe, 0x4d, 0x5d, 0xb9, 0x83, 0x3a, 0xe4, 0x97, 0x1e, 0x95,
	0x18, 0x99, 0x57, 0xd0, 0x5a, 0xbf, 0x54, 0xb4, 0x3d, 0x86, 0xd2, 0x3c, 0xd4, 0x8c, 0xee, 0xf0,
	0xc4, 0xa7, 0xea, 0x61, 0xf3, 0xda, 0x35, 0x2f, 0x99, 0x1f, 0xa1, 0xf2, 0x99, 0xba, 0xd3, 0xcd,
	0x9f, 0x67, 0x07, 0xaa, 0x31, 0x40, 0x86, 0xdf, 0x36, 0xec, 0x7e, 0x5a, 0x10, 0x86, 0xa7, 0x24,
	0xdd, 0x5e, 0x4e, 0xd9, 0xeb, 0x40, 0x59, 0x29, 0x05, 0xb4, 0x01, 0x3b, 0x38, 0x2a, 0x71, 0xad,
	0x66, 0xc9, 0xa1, 0xd9, 0x83, 0x3d, 0xde, 0xff, 0x6a, 0x41, 0xd8, 0x03, 0x75, 0xc9, 0x46, 0x46,
	0x5e, 0x42, 0x4d, 0x40, 0x42, 0x46, 0xa6, 0x95, 0x53, 0xa8, 0xdc, 0xe2, 0x3f, 0xd1, 0xe9, 0x67,
	0x9b, 0xa9, 0xc6, 0xb4, 0xa9, 0xe0, 0x9c, 0x02, 0x77, 0xa0, 0x3a, 0xbc, 0x0f, 0x30, 0x23, 0x16,
	0xa5, 0x7e, 0x16, 0xf9, 0x0d, 0xa0, 0xb8, 0x58, 0xa0, 0x9b, 0x50, 0x8c, 0xe6, 0x47, 0x8c, 0x52,
	0x5f, 0x9c, 0x16, 0x44, 0xa5, 0x50, 0x68, 0xde, 0x40, 0x83, 0x7b, 0xfd, 0x6e, 0xfb, 0xbf, 0xfb,
	0x04, 0xff, 0x9a, 0xd9, 0x1b, 0x1e, 0xda, 0x05, 0x1c, 0xa4, 0x80, 0xfe, 0x7f, 0x74, 0xe7, 0x7f,
	0xf3, 0xe2, 0x02, 0x19, 0x12, 0xb6, 0xb0, 0x27, 0x04, 0xbd, 0x86, 0x1c, 0x1f, 0xa3, 0x5a, 0xbc,
	0x93, 0xd8, 0x90, 0xb1, 0xb7, 0x5c, 0x8c, 0xe0, 0xe6, 0x13, 0xd4, 0x17, 0x17, 0x44, 0x0f, 0xcf,
	0x26, 0xc1, 0x0c, 0xfb, 0x94, 0xa1, 0x7a, 0xf2, 0x3a, 0x10, 0x88, 0x67, 0x2b, 0x75, 0x45, 0xf9,
	0x0a, 0xbb, 0xcb, 0xa1, 0x45, 0xcf, 0xe3, 0xe2, 0xe4, 0x8d, 0x60, 0x1c, 0xad, 0x99, 0x95, 0xc0,
	0xae, 0x86, 0x28, 0x34, 0xd6, 0x45, 0x13, 0xbd, 0x10, 0xcb, 0x33, 0x62, 0x6f, 0x9c, 0x64, 0xea,
	0x62, 0x0d, 0x2f, 0x41, 0x57, 0x19, 0x44, 0xd2, 0x6b, 0x32, 0xd6, 0x46, 0x63, 0x75, 0x42, 0x32,
	0xda, 0x1a, 0x7a, 0x0f, 0x3b, 0x22, 0x70, 0x68, 0x5f, 0x08, 0x97, 0xa3, 0x6a, 0xd4, 0x93, 0xe5,
	0xd8, 0xea, 0x81, 0xb8, 0xd5, 0x65, 0x02, 0xd1, 0x61, 0xfc, 0x98, 0x12, 0xb9, 0x34, 0x8c, 0xe5,
	0xc9, 0x78, 0xde, 0x42, 0x5a, 0x57, 0x43, 0x7d, 0xd0, 0x55, 0x62, 0x94, 0xa3, 0x64, 0xde, 0x94,
	0xa3, 0x95, 0x70, 0x09, 0x4a, 0x0f, 0xe0, 0x31, 0x1d, 0x48, 0xaa, 0x57, 0xd2, 0x65, 0x1c, 0xa4,
	0xcc, 0xa8, 0x17, 0xe4, 0x07, 0x54, 0x57, 0x5e, 0x71, 0xd4, 0x8c, 0x3b, 0x48, 0x49, 0x91, 0xd1,
	0x5a, 0x2f, 0x90, 0xe4, 0x4b, 0xfd, 0xe7, 0x8e, 0xf8, 0xfa, 0x8f, 0xf3, 0xfc, 0xc3, 0x7f, 0xf1,
	0x2f, 0x00, 0x00, 0xff, 0xff, 0x51, 0x70, 0x4d, 0x48, 0x0f, 0x08, 0x00, 0x00,
}
